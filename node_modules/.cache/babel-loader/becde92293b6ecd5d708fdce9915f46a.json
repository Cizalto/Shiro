{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/cizalto/Bureau/git/epitech/IRC/T-JSF-600-LYN-6-1-IRCjavascript-antoine.dupuis/irc/src/components/Body.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Content from './Content';\nimport ScrollableFeed from 'react-scrollable-feed';\nimport $ from 'jquery';\n\nfunction Body(props) {\n  _s();\n\n  const [msg, setMsg] = useState(\"\"); // const [history, setHistory] = useState([{content: \"Start of the history.\",sender: 'server', timeStamp: getTimestamp()}]);\n\n  const [userInput, setInput] = useState(); // const [userList, setUserList] = useState();\n  // const [firstLaunch, setFirst] = useState(false);\n\n  const socket = props.soc; // useEffect(() => {\n  //     console.log(\"useEffect triggered\");\n  //     if (!firstLaunch) {\n  //         socket.on(\"room-history\", (dataObj) =>{\n  //             console.log(\"here's\", dataObj.content.name,\"history:\",dataObj.content.history);\n  //             // let messageObj = {\n  //             //     userId: null,\n  //             //     content: message\n  //             // }\n  //             setHistory(historyCpy => ([...historyCpy, ...dataObj.content.history]))\n  //         })\n  //         socket.on(\"update-userList\", (userList) => {\n  //             console.log(\"Here's the userList:\",userList);\n  //             setUserList(userList)\n  //             updateScroll();\n  //         })\n  //         socket.on('getroomlist', (roomList) =>{\n  //             console.log(roomList);\n  //         })\n  //         socket.on(\"update\", (msgObj) =>{\n  //             // let messageObj = {\n  //             //     userId: null,\n  //             //     content: message\n  //             // }\n  //             displayUpdate(msgObj)\n  //         })\n  //         socket.on(\"chat\", (msgObj) => {\n  //             console.log(\"Here's the message Obj:\",msgObj);\n  //             setHistory(historyCpy => ([...historyCpy, msgObj]))\n  //             updateScroll();\n  //         })\n  //         setFirst(true)\n  //     }\n  //     function displayUpdate(msgObj){\n  //         setHistory(historyCpy => ([...historyCpy, msgObj]))\n  //     }\n  // }, [history])\n\n  console.log(\"Body history:\", props.history);\n\n  function getTimestamp() {\n    const options = {\n      timeZone: \"Etc/GMT-1\",\n      hour12: false,\n      hour: \"numeric\",\n      minute: \"numeric\",\n      seconds: \"numeric\"\n    };\n    return new Date().toLocaleTimeString(\"fr-FR\", options);\n  }\n\n  function sendMsg() {\n    if (msg !== \"\") {\n      console.log(\"SendMsg:\", props.history);\n      socket.emit(\"post\", msg, 'general', getTimestamp());\n      setMsg(\"\");\n      userInput.focus();\n    }\n  }\n\n  function checkEnter(event) {\n    if (event.key === 'Enter') {\n      sendMsg();\n    } else {}\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"frame\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(ScrollableFeed, {\n        className: \"feed\",\n        children: /*#__PURE__*/_jsxDEV(Content, {\n          messages: props.history,\n          users: props.userList,\n          soc: socket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textBar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: input => {\n          setInput(input);\n        },\n        className: \"inputText\",\n        placeholder: \"Write your text here !\",\n        value: msg,\n        onKeyPress: event => checkEnter(event),\n        onChange: event => setMsg(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send btn\",\n        onClick: event => sendMsg(msg),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Body, \"i4+fBA+3/F1uC/v1S+k3EjAv1AA=\");\n\n_c = Body;\nexport default Body;\n\nvar _c;\n\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"sources":["/home/cizalto/Bureau/git/epitech/IRC/T-JSF-600-LYN-6-1-IRCjavascript-antoine.dupuis/irc/src/components/Body.js"],"names":["React","useState","useEffect","Content","ScrollableFeed","$","Body","props","msg","setMsg","userInput","setInput","socket","soc","console","log","history","getTimestamp","options","timeZone","hour12","hour","minute","seconds","Date","toLocaleTimeString","sendMsg","emit","focus","checkEnter","event","key","userList","input","target","value"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react';\nimport Content from './Content';\nimport ScrollableFeed from 'react-scrollable-feed';\nimport $ from 'jquery';\n\nfunction Body(props) {\n    const [msg, setMsg] = useState(\"\");\n    // const [history, setHistory] = useState([{content: \"Start of the history.\",sender: 'server', timeStamp: getTimestamp()}]);\n    const [userInput, setInput] = useState();\n    // const [userList, setUserList] = useState();\n    // const [firstLaunch, setFirst] = useState(false);\n    const socket = props.soc\n\n    // useEffect(() => {\n    //     console.log(\"useEffect triggered\");\n    //     if (!firstLaunch) {\n    //         socket.on(\"room-history\", (dataObj) =>{\n    //             console.log(\"here's\", dataObj.content.name,\"history:\",dataObj.content.history);\n    //             // let messageObj = {\n    //             //     userId: null,\n    //             //     content: message\n    //             // }\n    //             setHistory(historyCpy => ([...historyCpy, ...dataObj.content.history]))\n    //         })\n\n    //         socket.on(\"update-userList\", (userList) => {\n    //             console.log(\"Here's the userList:\",userList);\n    //             setUserList(userList)\n\n    //             updateScroll();\n    //         })\n\n    //         socket.on('getroomlist', (roomList) =>{\n    //             console.log(roomList);\n    //         })\n\n    //         socket.on(\"update\", (msgObj) =>{\n\n    //             // let messageObj = {\n    //             //     userId: null,\n    //             //     content: message\n    //             // }\n    //             displayUpdate(msgObj)\n    //         })\n\n    //         socket.on(\"chat\", (msgObj) => {\n    //             console.log(\"Here's the message Obj:\",msgObj);\n    //             setHistory(historyCpy => ([...historyCpy, msgObj]))\n\n    //             updateScroll();\n    //         })\n\n    //         setFirst(true)\n    //     }\n    //     function displayUpdate(msgObj){\n    //         setHistory(historyCpy => ([...historyCpy, msgObj]))\n    //     }\n\n\n    // }, [history])\n\n    console.log(\"Body history:\",props.history);\n    \n    function getTimestamp() {\n        const options = {\n            timeZone:\"Etc/GMT-1\",\n            hour12 : false,\n            hour:  \"numeric\",\n            minute: \"numeric\",seconds:\"numeric\"\n        }\n        return new Date().toLocaleTimeString(\"fr-FR\",options)\n    }\n\n    function sendMsg() {\n        if (msg !== \"\") {\n            console.log(\"SendMsg:\",props.history);\n\n\n            socket.emit(\"post\", msg, 'general', getTimestamp(),)\n            setMsg(\"\")\n            userInput.focus()\n        }\n    }\n\n    function checkEnter(event) {\n        if (event.key === 'Enter') {\n            sendMsg();\n        } else {\n\n        }\n    }\n\n    return(\n        <div className=\"frame\">\n            <div className=\"content\">\n                <ScrollableFeed className=\"feed\">\n                    <Content messages={props.history} users={props.userList} soc={socket}/>\n                </ScrollableFeed>\n            </div>\n            <div className=\"textBar\">\n                <input type=\"text\" ref={(input) => {setInput(input)}} className=\"inputText\" placeholder=\"Write your text here !\" value={msg} onKeyPress={event => checkEnter(event)} onChange={event => setMsg(event.target.value)}></input>\n                <button className=\"send btn\" onClick={event => sendMsg(msg)}>Send</button>\n            </div>\n        </div>\n    );\n}\n\nexport default Body;"]},"metadata":{},"sourceType":"module"}