{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/cizalto/Bureau/git/epitech/IRC/T-JSF-600-LYN-6-1-IRCjavascript-antoine.dupuis/irc/src/components/Content.js\";\nimport { get } from 'jquery';\nimport React from 'react';\n\nfunction Content(props) {\n  let socket = props.soc;\n\n  function msgStacker() {\n    //Créer un array d'array pour séparer chaque block de message\n    let msgArr = [];\n    let blockArr = [];\n    props.messages.map(function (msg, index) {\n      if (index > 0 && msg.sender !== props.messages[index - 1].sender || index === props.messages.length - 1 && msg.sender === props.messages[index - 1].sender) {\n        blockArr = [...blockArr, msgArr];\n        console.log(\"update block\", blockArr);\n        msgArr = [];\n      } else {\n        msgArr = [...msgArr, msg];\n      }\n    });\n    console.log(\"return msgArr\", msgArr);\n    console.log(\"return block\", blockArr);\n    return blockArr; //Construction du block en jsx\n  } // eslint-disable-next-line no-lone-blocks\n  //{\n  // if (index > 0 && msg.sender != props.messages[index-1].sender) {\n  //     var content = (\n  //         <div>\n  //             <div className=\"msg-header\">{msg.userName}</div>\n  //             <div className=\"msg-body\">{msg.content}</div>\n  //         </div>\n  //     )\n  // } else if (index > 0 && msg.sender === props.messages[index-1].sender) {\n  //     var content = (\n  //         <div>\n  //             <div className=\"msg-body\">{msg.content}</div>\n  //         </div>\n  //     )\n  // } else if (index < props.messages.length-1 && msg.sender != props.messages[index+1].sender) {\n  //     var content = (\n  //         <div>\n  //             <div className=\"msg-body\">{msg.content}</div>\n  //             <div className=\"msg-footer\">Posted at {getTimestamp()}</div>\n  //         </div>\n  //     )\n  // } else if (index == props.messages.length-1) {\n  //     var content = (\n  //         <div>\n  //             <div className=\"msg-body\">{msg.content}</div>\n  //             <div className=\"msg-footer\">Posted at {getTimestamp()}</div>\n  //         </div>\n  //     )\n  // }\n\n\n  return msgStacker().map(function (msg, index) {\n    let messageType;\n\n    if (msg.sender !== 'server') {\n      console.log(msg.sender);\n\n      if (msg.sender === socket.id) {\n        messageType = \"message self\";\n      } else {\n        messageType = \"message other\";\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: messageType,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"msg\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex flex-row msg-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"msg-user\",\n              children: props.users.content[msg.sender]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"msg-role\",\n              children: \"/ Admin, Mod\\xE9rateur\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"msg-body\",\n            children: msg.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"msg-footer\",\n            children: [\"Posted at \", msg.timeStamp]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this);\n    } else {\n      messageType = \"info\";\n      let infoType = \"serv \" + msg.type;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: messageType,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: infoType,\n          children: [msg.timeStamp, \" - \", msg.content]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this);\n    }\n  });\n}\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/home/cizalto/Bureau/git/epitech/IRC/T-JSF-600-LYN-6-1-IRCjavascript-antoine.dupuis/irc/src/components/Content.js"],"names":["get","React","Content","props","socket","soc","msgStacker","msgArr","blockArr","messages","map","msg","index","sender","length","console","log","messageType","id","users","content","timeStamp","infoType","type"],"mappings":"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","sourcesContent":["import { get } from 'jquery';\nimport React from 'react';\n\nfunction Content(props) {\n    let socket = props.soc\n\n    function msgStacker() {\n        //Créer un array d'array pour séparer chaque block de message\n        let msgArr = [];\n        let blockArr= [];\n\n        props.messages.map(function(msg,index) {\n            if ((index > 0 && msg.sender !== props.messages[index-1].sender) || (index === props.messages.length-1 && msg.sender === props.messages[index-1].sender)) {\n                blockArr = [...blockArr, msgArr];\n                console.log(\"update block\",blockArr);\n                msgArr = [];\n            } else {\n                msgArr = [...msgArr, msg];\n            }\n        })\n\n        console.log(\"return msgArr\",msgArr);\n        console.log(\"return block\",blockArr);\n        return blockArr;\n        //Construction du block en jsx\n    }\n\n        // eslint-disable-next-line no-lone-blocks\n        //{\n            // if (index > 0 && msg.sender != props.messages[index-1].sender) {\n            //     var content = (\n            //         <div>\n            //             <div className=\"msg-header\">{msg.userName}</div>\n            //             <div className=\"msg-body\">{msg.content}</div>\n            //         </div>\n            //     )\n            // } else if (index > 0 && msg.sender === props.messages[index-1].sender) {\n            //     var content = (\n            //         <div>\n            //             <div className=\"msg-body\">{msg.content}</div>\n            //         </div>\n            //     )\n            // } else if (index < props.messages.length-1 && msg.sender != props.messages[index+1].sender) {\n            //     var content = (\n            //         <div>\n            //             <div className=\"msg-body\">{msg.content}</div>\n            //             <div className=\"msg-footer\">Posted at {getTimestamp()}</div>\n            //         </div>\n            //     )\n            // } else if (index == props.messages.length-1) {\n            //     var content = (\n            //         <div>\n            //             <div className=\"msg-body\">{msg.content}</div>\n            //             <div className=\"msg-footer\">Posted at {getTimestamp()}</div>\n            //         </div>\n            //     )\n            // }\n\n        return msgStacker().map(function(msg,index) {\n            let messageType;\n            if (msg.sender !== 'server') {\n                console.log(msg.sender);\n                if (msg.sender === socket.id) {\n                    messageType = \"message self\";\n                } else {\n                    messageType = \"message other\";\n                }\n                return (\n                    <div className={messageType}>\n                        <div className=\"msg\">\n                            <div className=\"d-flex flex-row msg-header\">\n                                <div className=\"msg-user\">{props.users.content[msg.sender]}</div>\n                                <div className=\"msg-role\">/ Admin, Modérateur</div>\n                            </div>\n                            <div className=\"msg-body\">{msg.content}</div>\n                            <div className=\"msg-footer\">Posted at {msg.timeStamp}</div>\n                        </div>\n                    </div>\n                )\n            } else {\n                messageType = \"info\";\n                let infoType = \"serv \"+msg.type;\n                return (\n                    <div className={messageType}>\n                        <div className={infoType}>\n                            {msg.timeStamp} - {msg.content}\n                        </div>\n                    </div>\n                )\n            }\n        }\n    )\n}\n\nexport default Content;"]},"metadata":{},"sourceType":"module"}