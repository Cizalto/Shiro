{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/cizalto/Bureau/git/Personel/Shiro/Shiro/src/components/Channels.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Body from './Body';\n\nfunction Channels(props) {\n  _s();\n\n  let socket = props.soc;\n  const [currentChannel, setCurrentChannel] = useState('Général');\n  const [activeChannel, setActiveChannel] = useState([false, true]);\n  const [channels, setChannels] = useState(props.channels);\n  const [count, setCount] = useState(1);\n  var channelList = [{\n    label: 'Général',\n    content: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-content\",\n      children: /*#__PURE__*/_jsxDEV(Body, {\n        soc: socket,\n        active: activeChannel[0],\n        history: channels[channels.channelList[0]].history,\n        channel: channels.channelList[0],\n        userList: props.userList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }, this)\n  } // {\n  //     label: 'Channel 2',\n  //     content: (\n  //         <div className=\"channel-content\">\n  //             <Body soc={socket} active={activeChannel[1]} history={channels[channels.channelList[1]].history} channel={channels.channelList[1]} userList={props.userList}/>\n  //         </div>\n  //     )\n  // }\n  ];\n\n  function addChannel() {\n    for (let i = 1; i < channels.channelList.length; i++) {\n      console.log(\"For loop count\", i);\n      var newChannel = {\n        label: channels.channelList[i],\n        content: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"channel-content\",\n          children: /*#__PURE__*/_jsxDEV(Body, {\n            soc: socket,\n            active: activeChannel[1],\n            history: channels[channels.channelList[i]].history,\n            channel: channels.channelList[i],\n            userList: props.userList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this)\n      };\n      channelList = [...channelList, newChannel];\n    }\n  }\n\n  if (channels !== props.channels) {\n    setChannels(props.channels);\n  }\n\n  if (props.channels.channelList.length > channelList.length) {\n    addChannel();\n  }\n\n  console.log('====================================');\n  console.log(\"The actual Channel count:\", props.channels.channelList.length);\n  console.log(\"The displayed channel count:\", channelList.length);\n  console.log(\"The react component Channel list:\", channelList);\n  console.log('====================================');\n\n  function updateChannel(label) {\n    setCurrentChannel(label);\n    channelList.map((channel, index) => {\n      let activeChannel_cpy = activeChannel;\n\n      if (channel.label === label) {\n        activeChannel_cpy[index] = false;\n      } else {\n        activeChannel_cpy[index] = true;\n      }\n\n      setActiveChannel(activeChannel_cpy);\n      return null;\n    });\n  }\n\n  function removeChannel() {}\n\n  function displayConnectedUsers() {\n    console.log(\"Displaying\", props.userList);\n\n    if (props.userList != undefined) {\n      console.log(\"Entries before\", Object.entries(props.userList.content));\n      var content = [];\n\n      for (const [key, value] of Object.entries(props.userList.content)) {\n        console.log(\"Entries\", Object.entries(props.userList.content));\n        console.log(\"Value\", value);\n        console.log(\"Content\", content);\n        content[key] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"username\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this);\n        console.log(\"Content\", content); // return content\n      } // return content\n\n\n      content.forEach(element => {\n        console.log(\"Element\", element); // return element;\n      });\n    } else {\n      console.log(\"No user to display\");\n      return null;\n    }\n  }\n\n  console.log('====================================');\n  console.log(\"Channels history\", props.channels);\n  console.log('====================================');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex flex-column flex-grow-1\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channels\",\n      children: channelList.map((channel, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateChannel(channel.label),\n        className: channel.label === currentChannel ? 'btn channel active' : 'btn channel',\n        children: channel.label\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), channelList.map((channel, i) => {\n      if (channel.label === currentChannel) {\n        console.log(\"activeChannel[0]: \", activeChannel[0]);\n        console.log(\"activeChannel[1]: \", activeChannel[1]);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"frame\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex flex-column flex-grow-1\",\n            children: channel.content\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"menu\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"title\",\n              children: \"Connected Users\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"userlist\",\n              children: displayConnectedUsers()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 29\n        }, this);\n      } else {\n        return null;\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Channels, \"AyELiiIJCuxYI0ipHT7XPGWnaHw=\");\n\n_c = Channels;\nexport default Channels;\n\nvar _c;\n\n$RefreshReg$(_c, \"Channels\");","map":{"version":3,"sources":["/home/cizalto/Bureau/git/Personel/Shiro/Shiro/src/components/Channels.js"],"names":["React","useState","useEffect","Body","Channels","props","socket","soc","currentChannel","setCurrentChannel","activeChannel","setActiveChannel","channels","setChannels","count","setCount","channelList","label","content","history","userList","addChannel","i","length","console","log","newChannel","updateChannel","map","channel","index","activeChannel_cpy","removeChannel","displayConnectedUsers","undefined","Object","entries","key","value","forEach","element"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react';\nimport Body from './Body';\n\nfunction Channels(props) {\n    let socket = props.soc;\n\n    const [currentChannel, setCurrentChannel] = useState('Général');\n    const [activeChannel, setActiveChannel] = useState([false,true]);\n    const [channels, setChannels] = useState(props.channels)\n    const [count, setCount] = useState(1)\n    \n    var channelList = [\n        {\n            label: 'Général',\n            content: (\n                <div className=\"channel-content\">\n                    <Body soc={socket} active={activeChannel[0]} history={channels[channels.channelList[0]].history} channel={channels.channelList[0]} userList={props.userList}/>\n                </div>\n            )\n        }\n        // {\n        //     label: 'Channel 2',\n        //     content: (\n        //         <div className=\"channel-content\">\n        //             <Body soc={socket} active={activeChannel[1]} history={channels[channels.channelList[1]].history} channel={channels.channelList[1]} userList={props.userList}/>\n        //         </div>\n        //     )\n        // }\n    ];\n\n        function addChannel() {\n            for (let i = 1; i <channels.channelList.length; i++ ){\n                console.log(\"For loop count\", i);\n                var newChannel =  {\n                    label: channels.channelList[i],\n                    content: (\n                        <div className=\"channel-content\">\n                            <Body soc={socket} active={activeChannel[1]} history={channels[channels.channelList[i]].history} channel={channels.channelList[i]} userList={props.userList}/>\n                        </div>\n                    )\n                };\n    \n                channelList = [...channelList, newChannel];\n            }\n        }\n\n        if (channels !== props.channels){\n            setChannels(props.channels)\n        }\n\n        if (props.channels.channelList.length>channelList.length) {\n            addChannel();\n        }\n\n            console.log('====================================');\n            console.log(\"The actual Channel count:\",props.channels.channelList.length);\n            console.log(\"The displayed channel count:\",channelList.length);\n            console.log(\"The react component Channel list:\",channelList);\n            console.log('====================================');\n\n    \n\n\n\n    function updateChannel(label) {\n        setCurrentChannel(label);\n\n        channelList.map((channel, index) => {\n            let activeChannel_cpy = activeChannel;\n            if (channel.label === label) {\n                activeChannel_cpy[index] = false;\n            } else {\n                activeChannel_cpy[index] = true;\n            }\n            setActiveChannel(activeChannel_cpy);\n            return null\n        })\n    }\n\n    function removeChannel() {\n\n    }\n\n    function displayConnectedUsers() {\n        console.log(\"Displaying\", props.userList);\n        if (props.userList != undefined) {\n            console.log(\"Entries before\",Object.entries(props.userList.content))\n            var content = [];\n            for(const [key,value] of Object.entries(props.userList.content)) {\n                console.log(\"Entries\",Object.entries(props.userList.content));\n                console.log(\"Value\", value);\n                console.log(\"Content\",content);\n                content[key] = (\n                    <div className=\"username\">\n                        {value}\n                    </div>\n                )\n                console.log(\"Content\",content);\n                // return content\n            }\n            // return content\n            content.forEach(element => {\n                console.log(\"Element\",element);\n                // return element;\n            });\n        } else {\n            console.log(\"No user to display\");\n            return null;\n        }\n    }\n\n    console.log('====================================');\n    console.log(\"Channels history\", props.channels);\n    console.log('====================================');\n\n    return(\n        <div className=\"d-flex flex-column flex-grow-1\">\n            <div className=\"channels\">\n                {\n                    channelList.map((channel, i) => (\n                        <button\n                            key={i}\n                            onClick={() => updateChannel(channel.label)}\n                            className={(channel.label === currentChannel) ? 'btn channel active' : 'btn channel'}>\n                                {channel.label}\n                        </button>\n                    ))\n                }\n                {/* <button className=\"btn add channel\" onClick={addChannel(\"Chan oni\")}>\n                    +\n                </button> */}\n            </div>\n\n            {\n                channelList.map((channel, i) => {\n\n                    if (channel.label === currentChannel) {\n                        console.log(\"activeChannel[0]: \",activeChannel[0]);\n                        console.log(\"activeChannel[1]: \",activeChannel[1]);\n                        return (\n                            <div className=\"frame\">\n                                <div className=\"d-flex flex-column flex-grow-1\" key={i}>\n                                    {channel.content}\n                                </div>\n                                <div className=\"menu\">\n                                    <div className=\"title\">\n                                        Connected Users\n                                    </div>\n                                    <div className=\"userlist\">\n                                        {displayConnectedUsers()}\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    } else {\n                        return null;\n                    }\n                })\n            }\n        </div>\n    );\n}\n\nexport default Channels;"]},"metadata":{},"sourceType":"module"}