{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/cizalto/Bureau/git/epitech/IRC/T-JSF-600-LYN-6-1-IRCjavascript-antoine.dupuis/irc/src/components/Header.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Body from './Body';\n\nfunction Header(props) {\n  _s();\n\n  let socket = props.soc;\n  const [currentChannel, setCurrentChannel] = useState('Channel 1');\n  const [activeChannel, setActiveChannel] = useState([true, false]);\n  var channelList = [{\n    label: 'Général',\n    content: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-content\",\n      children: [/*#__PURE__*/_jsxDEV(Body, {\n        soc: socket,\n        active: activeChannel[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"^-G\\xE9n\\xE9ral-^\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }, this)\n  }, {\n    label: 'Channel 2',\n    content: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Channel 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Body, {\n        soc: socket,\n        active: activeChannel[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this)\n  }];\n\n  function addChannel(label) {\n    var newChannel = {\n      label: label,\n      content: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-content\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    };\n    channelList = [...channelList, newChannel];\n  }\n\n  function updateChannel(label) {\n    setCurrentChannel(label);\n    channelList.map((channel, index) => {\n      let activeChannel_cpy = activeChannel;\n\n      if (channel.label == label) {\n        activeChannel_cpy[index] = true;\n      } else {\n        activeChannel_cpy[index] = false;\n      }\n\n      setActiveChannel(activeChannel_cpy);\n    });\n  }\n\n  function removeChannel() {} // channelList.map((channel, i) => {\n  //     // let activeChannel_cpy = [...activeChannel];\n  //     if (channel.label === currentChannel) {\n  //         // activeChannel_cpy[i] = true;\n  //         setActiveChannel(activeChannel.slice()[i] = false);\n  //     } else {\n  //         // activeChannel_cpy[i] = false;\n  //         setActiveChannel(activeChannel.slice()[i] = false);\n  //     }\n  //     setActiveChannel(activeChannel);\n  // })\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channels\",\n      children: [channelList.map((channel, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateChannel(channel.label),\n        className: channel.label === currentChannel ? 'btn channel active' : 'btn channel',\n        children: channel.label\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn add channel\",\n        onClick: addChannel(\"Chan oni\"),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), channelList.map((channel, i) => {\n      // let activeChannel_cpy = [...activeChannel];\n      if (channel.label === currentChannel) {\n        // activeChannel_cpy[i] = true;\n        // setActiveChannel(activeChannel_cpy);\n        console.log(\"activeChannel[0]: \", activeChannel[0]);\n        console.log(\"activeChannel[1]: \", activeChannel[1]);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: channel.content\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 32\n        }, this);\n      } else {\n        // activeChannel_cpy[i] = false;\n        // setActiveChannel(activeChannel_cpy);\n        return null;\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Header, \"CX7A1x23nq+0JqVE0216Lkxcutk=\");\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/home/cizalto/Bureau/git/epitech/IRC/T-JSF-600-LYN-6-1-IRCjavascript-antoine.dupuis/irc/src/components/Header.js"],"names":["React","useState","Body","Header","props","socket","soc","currentChannel","setCurrentChannel","activeChannel","setActiveChannel","channelList","label","content","addChannel","newChannel","updateChannel","map","channel","index","activeChannel_cpy","removeChannel","i","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Body from './Body';\n\nfunction Header(props) {\n    let socket = props.soc;\n\n    const [currentChannel, setCurrentChannel] = useState('Channel 1');\n    const [activeChannel, setActiveChannel] = useState([true,false]);\n\n    var channelList = [\n        {\n            label: 'Général',\n            content: (\n                <div className=\"channel-content\">\n                    <Body soc={socket} active={activeChannel[0]}/>\n                    <p>^-Général-^</p>\n                </div>\n            )\n        },\n        {\n            label: 'Channel 2',\n            content: (\n                <div className=\"channel-content\">\n                    <p>Channel 2</p>\n                    <Body soc={socket} active={activeChannel[1]}/>\n                </div>\n            )\n        }\n    ];\n\n    function addChannel(label) {\n        var newChannel = {\n            label: label,\n            content: (\n                <div className=\"channel-content\">\n                    <p>{label}</p>\n                </div>\n            )\n        };\n\n        channelList = [...channelList, newChannel];\n    }\n\n    function updateChannel(label) {\n        setCurrentChannel(label);\n\n        channelList.map((channel, index) => {\n            let activeChannel_cpy = activeChannel;\n            if (channel.label == label) {\n                activeChannel_cpy[index] = true;\n            } else {\n                activeChannel_cpy[index] = false;\n            }\n            setActiveChannel(activeChannel_cpy);\n        })\n    }\n\n    function removeChannel() {\n\n    }\n\n    // channelList.map((channel, i) => {\n    //     // let activeChannel_cpy = [...activeChannel];\n    //     if (channel.label === currentChannel) {\n    //         // activeChannel_cpy[i] = true;\n    //         setActiveChannel(activeChannel.slice()[i] = false);\n    //     } else {\n    //         // activeChannel_cpy[i] = false;\n    //         setActiveChannel(activeChannel.slice()[i] = false);\n    //     }\n    //     setActiveChannel(activeChannel);\n    // })\n\n    return(\n        <div>\n            <div className=\"channels\">\n                {\n                    channelList.map((channel, i) => (\n                        <button\n                            key={i}\n                            onClick={() => updateChannel(channel.label)}\n                            className={(channel.label === currentChannel) ? 'btn channel active' : 'btn channel'}>\n                                {channel.label}\n                        </button>\n                    ))\n                }\n                <button className=\"btn add channel\" onClick={addChannel(\"Chan oni\")}>\n                    +\n                </button>\n            </div>\n\n            {/* {displayContent()} */}\n\n            {\n                channelList.map((channel, i) => {\n                    // let activeChannel_cpy = [...activeChannel];\n                    if (channel.label === currentChannel) {\n                        // activeChannel_cpy[i] = true;\n                        // setActiveChannel(activeChannel_cpy);\n                        console.log(\"activeChannel[0]: \",activeChannel[0]);\n                        console.log(\"activeChannel[1]: \",activeChannel[1]);\n                        return <div key={i}>{channel.content}</div>\n                    } else {\n                        // activeChannel_cpy[i] = false;\n                        // setActiveChannel(activeChannel_cpy);\n                        return null;\n                    }\n                })\n            }\n        </div>\n    );\n}\n\nexport default Header;"]},"metadata":{},"sourceType":"module"}